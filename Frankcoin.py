import mysql.connector
import logging
import random
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

bot_start_time = time.time()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'user': 'u4599_p5zq1X6TiT',
    'password': '9b!zh74Q5ZkDxg=hNjXwSd!g',
    'host': '157.90.239.85',
    'port': '3306',
    'database': 's4599_Infoplayers'
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
game_active = None
current_prize = 0
multiplier_attempts = 3

def connect_db():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    return mysql.connector.connect(**DB_CONFIG)

def initialize_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã."""
    try:
        connection = connect_db()
        cursor = connection.cursor()
        
        create_table_query = """
        CREATE TABLE IF NOT EXISTS coins (
            user_id BIGINT PRIMARY KEY,
            username VARCHAR(255),
            coins DECIMAL(10, 4)
        )
        """
        
        cursor.execute(create_table_query)
        connection.commit()
    except mysql.connector.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")
    finally:
        cursor.close()
        connection.close()

def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤."""
    if update.message is None or update.message.from_user is None:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if update.message.date.timestamp() < bot_start_time:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # –ï—Å–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if username is None:
        return

    coins_earned = 0.0004

    try:
        connection = connect_db()
        cursor = connection.cursor()

        cursor.execute("SELECT coins FROM coins WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        
        if result:
            cursor.execute("UPDATE coins SET coins = coins + %s WHERE user_id = %s", (coins_earned, user_id))
        else:
            cursor.execute("INSERT INTO coins (user_id, username, coins) VALUES (%s, %s, %s)", 
                           (user_id, username, coins_earned))
        
        connection.commit()
    except mysql.connector.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")
    finally:
        cursor.close()
        connection.close()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} ({user_id}) –Ω–∞—á–∏—Å–ª–µ–Ω–æ {coins_earned} –∫–æ–∏–Ω–æ–≤.")

def show_coins(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /mycoins –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤."""
    if update.message is None or update.message.from_user is None:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    user_id = update.message.from_user.id
    username = update.message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    try:
        connection = connect_db()
        cursor = connection.cursor()
        
        cursor.execute("SELECT username, coins FROM coins WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        
        chat_id = update.message.chat_id
        
        if result:
            db_username, coins = result
            if db_username != username:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("UPDATE coins SET username = %s WHERE user_id = %s", (username, user_id))
                connection.commit()
                context.bot.send_message(chat_id=chat_id, text=f"–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ @{username}.")
            message = f"@{username}, —É –≤–∞—Å {coins} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤."
        else:
            message = f"@{username}, –≤—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω—ã."
        
        context.bot.send_message(chat_id=chat_id, text=message)
    except mysql.connector.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")
        context.bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    finally:
        cursor.close()
        connection.close()

def show_top(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /top –¥–ª—è –ø–æ–∫–∞–∑–∞ –¢–û–ü-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–∏–Ω–æ–≤."""
    if update.message is None:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    try:
        connection = connect_db()
        cursor = connection.cursor()
        
        cursor.execute("""
            SELECT user_id, username, coins FROM coins
        """)
        
        results = cursor.fetchall()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤
        for user in results:
            user_id, username, coins = user
            if username is None:
                cursor.execute("DELETE FROM coins WHERE user_id = %s", (user_id,))
        
        connection.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¢–û–ü–∞
        cursor.execute("""
            SELECT username, coins FROM coins
            WHERE username IS NOT NULL
            ORDER BY coins DESC
            LIMIT 20
        """)
        
        results = cursor.fetchall()
        
        chat_id = update.message.chat_id
        
        if results:
            top_message = "–¢–û–ü-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤:\n\n"
            for rank, (username, coins) in enumerate(results, start=1):
                top_message += f"{rank}. @{username} ‚Äî {coins} ü™ôFCoin\n"
            context.bot.send_message(chat_id=chat_id, text=top_message)
        else:
            context.bot.send_message(chat_id=chat_id, text="–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except mysql.connector.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")
        context.bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    finally:
        cursor.close()
        connection.close()
                
def start_game(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã."""
    global game_active
    
    if game_active:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    bettor_id = update.message.from_user.id
    bettor_username = update.message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    if bettor_username is None:
        context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞: –£ –≤–∞—Å —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å.")
        return

    bet_side = None
    bet_amount = None
    
    if update.message.text.startswith('/o'):
        bet_side = 'heads'
    elif update.message.text.startswith('/r'):
        bet_side = 'tails'
    
    if bet_side:
        if len(context.args) > 0:
            try:
                bet_amount = float(context.args[0])
            except ValueError:
                bet_amount = None
            
            if bet_amount is None or bet_amount <= 0:
                context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞: –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return

        else:
            context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞: –°—Ç–∞–≤–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
            return
        
        if update.message.reply_to_message and update.message.reply_to_message.from_user:
            challenged_id = update.message.reply_to_message.from_user.id
            challenged_username = update.message.reply_to_message.from_user.username

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞ —É –≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if challenged_username is None:
                context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤—ã–∑—ã–≤–∞–µ—Ç–µ, —Å–∫—Ä—ã—Ç —é–∑–µ—Ä–Ω–µ–π–º. –ò–≥—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç–∞.")
                return

            chat_id = update.message.chat_id

            game_active = {
                'bettor': bettor_id,
                'bettor_username': bettor_username,
                'challenged': challenged_id,
                'challenged_username': challenged_username,
                'bet_amount': bet_amount,
                'bet_side': bet_side,
                'chat_id': chat_id
            }

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            side_translation = {
                'heads': '–æ—Ä–µ–ª',
                'tails': '—Ä–µ—à–∫–∞'
            }
            
            try:
                connection = connect_db()
                cursor = connection.cursor()
                
                cursor.execute("SELECT coins FROM coins WHERE user_id = %s", (bettor_id,))
                bettor_coins = cursor.fetchone()
                cursor.execute("SELECT coins FROM coins WHERE user_id = %s", (challenged_id,))
                challenged_coins = cursor.fetchone()
                
                if bettor_coins and challenged_coins:
                    bettor_coins = bettor_coins[0]
                    challenged_coins = challenged_coins[0]
                    
                    if bettor_coins < bet_amount or challenged_coins < bet_amount:
                        context.bot.send_message(chat_id=update.message.chat_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
                        game_active = None
                        return
                    
                    keyboard = [
                        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É", callback_data='accept')],
                        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    bet_side_russian = side_translation.get(bet_side, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text=f"@{bettor_username} ({bettor_id}) –≤—ã–∑—ã–≤–∞–µ—Ç @{challenged_username} ({challenged_id}) –Ω–∞ –∏–≥—Ä—É –≤ –æ—Ä–µ–ª-—Ä–µ—à–∫–∞ –∏ —Å—Ç–∞–≤–∏—Ç {bet_amount:.4f} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤ –Ω–∞ {bet_side_russian}.",
                        reply_markup=reply_markup
                    )
                else:
                    context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–∞—Ö.")
            except mysql.connector.Error as err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")
                context.bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–∫–∞—Ö.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            finally:
                cursor.close()
                connection.close()
        else:
            context.bot.send_message(chat_id=update.message.chat_id, text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –µ–≥–æ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –∏–≥—Ä—É.")
    else:
        context.bot.send_message(chat_id=update.message.chat_id, text="–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ.")

def end_game(update: Update, context: CallbackContext, accepted: bool):
    """–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–º–Ω–æ–∂–µ–Ω–∏—è."""
    global game_active, current_prize, multiplier_attempts
    
    if not game_active:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    chat_id = game_active['chat_id']
    
    if accepted:
        bettor_id = game_active['bettor']
        bettor_username = game_active['bettor_username']
        bet_amount = game_active['bet_amount']
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        result = 'heads' if random.choice([True, False]) else 'tails'
        winner_id = bettor_id if (result == game_active['bet_side']) else None
        current_prize = bet_amount if winner_id == bettor_id else 0
        
        if winner_id:
            context.bot.send_message(chat_id=chat_id, text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, @{bettor_username}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {current_prize:.4f} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤.")
        else:
            context.bot.send_message(chat_id=chat_id, text=f"@{game_active['challenged_username']} –ø–æ–±–µ–¥–∏–ª! –ü—Ä–∏–∑ {bet_amount:.4f} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤ —Å–≥–æ—Ä–µ–ª.")
            current_prize = 0
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", callback_data='claim')],
            [InlineKeyboardButton("–•2", callback_data='double')],
            [
                InlineKeyboardButton("‚ô†Ô∏è", callback_data='suit'),
                InlineKeyboardButton("‚ô•Ô∏è", callback_data='suit'),
                InlineKeyboardButton("‚ô¶Ô∏è", callback_data='suit'),
                InlineKeyboardButton("‚ô£Ô∏è", callback_data='suit')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=chat_id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        game_active['prize'] = current_prize
        game_active['multiplier_attempts'] = multiplier_attempts
        
    else:
        context.bot.send_message(chat_id=chat_id, text="–ò–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞.")

def button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    global current_prize, multiplier_attempts, game_active
    query = update.callback_query
    
    if query is None or query.message is None:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return
    
    user_id = query.from_user.id
    chat_id = query.message.chat_id
    
    if game_active:
        if query.data == 'accept':
            if user_id == game_active['challenged']:
                context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                end_game(update, context, True)
            else:
                query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É.")
                
        elif query.data == 'cancel':
            if user_id in [game_active['challenged'], game_active['bettor']]:
                context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                end_game(update, context, False)
            else:
                query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É.")

        elif query.data == 'claim':
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤—ã—Ö –∫–æ–∏–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                connection = connect_db()
                cursor = connection.cursor()
                cursor.execute("UPDATE coins SET coins = coins + %s WHERE user_id = %s", (current_prize, user_id))
                connection.commit()
                context.bot.send_message(chat_id=chat_id, text=f"@{game_active['bettor_username']} –∑–∞–±—Ä–∞–ª {current_prize:.4f} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except mysql.connector.Error as err:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")
                context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ–∏–Ω–æ–≤.")
            finally:
                cursor.close()
                connection.close()

            current_prize = 0
            game_active = None  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã

        elif query.data == 'double':
            if multiplier_attempts > 0:
                if random.choice([True, False]):
                    current_prize *= 2  # –£–º–Ω–æ–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–∑
                    multiplier_attempts -= 1
                    context.bot.send_message(chat_id=chat_id, text=f"–£—Å–ø–µ—Ö! –í–∞—à –ø—Ä–∏–∑ —Ç–µ–ø–µ—Ä—å {current_prize:.4f} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑.")
                else:
                    context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                    context.bot.send_message(chat_id=chat_id, text=f"@{game_active['bettor_username']} –Ω–µ —É–¥–∞–ª–æ—Å—å —É–º–Ω–æ–∂–µ–Ω–∏–µ, –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ {current_prize:.4f} —Å–≥–æ—Ä–µ–ª. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    current_prize = 0
                    game_active = None

        elif query.data in ['spades', 'hearts', 'diamonds', 'clubs']:
            if multiplier_attempts > 0:
                if random.choice([True, False]):
                    current_prize *= 4  # –£–º–Ω–æ–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–∑
                    multiplier_attempts -= 1
                    context.bot.send_message(chat_id=chat_id, text=f"–£—Å–ø–µ—Ö! –í–∞—à –ø—Ä–∏–∑ —Ç–µ–ø–µ—Ä—å {current_prize:.4f} —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑.")
                else:
                    context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
                    context.bot.send_message(chat_id=chat_id, text=f"@{game_active['bettor_username']} –Ω–µ —É–¥–∞–ª–æ—Å—å —É–º–Ω–æ–∂–µ–Ω–∏–µ, –ø—Ä–∏–∑ –≤ —Ä–∞–∑–º–µ—Ä–µ {current_prize:.4f} —Å–≥–æ—Ä–µ–ª. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    current_prize = 0
                    game_active = None
            else:
                context.bot.send_message(chat_id=chat_id, text="–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è.")

        else:
            query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    else:
        query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        
def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

def onegram(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /onegram –¥–ª—è –æ–±–º–µ–Ω–∞ 1 —Ñ—Ä–∞–Ω–∫–∫–æ–∏–Ω–∞ –Ω–∞ –≤–∞—É—á–µ—Ä."""
    if update.message.reply_to_message is None or update.message.reply_to_message.from_user is None:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–±–º–µ–Ω.")
        return

    user_id = update.message.reply_to_message.from_user.id
    chat_id = update.message.chat_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    try:
        chat_administrators = context.bot.get_chat_administrators(chat_id)
        admin_ids = [admin.user.id for admin in chat_administrators]
        
        if update.message.from_user.id not in admin_ids:
            context.bot.send_message(chat_id=chat_id, text="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
            return

        with connect_db() as connection:
            with connection.cursor() as cursor:
                cursor.execute("SELECT coins FROM coins WHERE user_id = %s", (user_id,))
                result = cursor.fetchone()

                if result:
                    user_coins = result[0]

                    if user_coins >= 1:
                        cursor.execute("UPDATE coins SET coins = coins - 1 WHERE user_id = %s", (user_id,))
                        connection.commit()
                        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{update.message.reply_to_message.from_user.username} –æ–±–º–µ–Ω—è–ª 1 –∫–æ–∏–Ω –Ω–∞ –≤–∞—É—á–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–∫—É–ø–∫–∏. –û—Å—Ç–∞–ª–æ—Å—å {user_coins - 1} –∫–æ–∏–Ω–æ–≤."
                    else:
                        message = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞."
                else:
                    message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        context.bot.send_message(chat_id=chat_id, text=message)
    except mysql.connector.Error as err:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")
        context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def cancel_game(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /cg –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã."""
    global game_active
    
    if not game_active:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        return
    
    game_active = None

    context.bot.send_message(chat_id=update.message.chat_id, text="–ò–≥—Ä–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    global job_queue
    
    initialize_db()
    
    TOKEN = '7391304816:AAElyYZf991bag-UVEo8lxZsi2GYWOi8t4w'
    
    updater = Updater(token=TOKEN, use_context=True)
    job_queue = updater.job_queue
    
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(CommandHandler('mycoins', show_coins))
    dispatcher.add_handler(CommandHandler('top', show_top))
    dispatcher.add_handler(CommandHandler('o', start_game))
    dispatcher.add_handler(CommandHandler('r', start_game))
    dispatcher.add_handler(CommandHandler('onegram', onegram))
    dispatcher.add_handler(CommandHandler('cg', cancel_game))
    dispatcher.add_handler(CallbackQueryHandler(button))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    dispatcher.add_error_handler(error_handler)
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
